<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
 1.这是一个mapper xml文件
 2.该文件可以去实现对应的接口的方法
 3.namespace用来指定该xml文件和哪个接口对应
 -->
<mapper namespace="com.gaoxi.mapper.MonsterMapper">
    <!-- 配置/实现方法addMonster
     1.id="addMonster" 就是接口的方法名
     2.parameterType="com.gaoxi.entity.Monster" 放入的形参的类型
     3.parameterType中的com.gaoxi.entity.Monster可以简写
     4.写入SQL语句=>，建议先在sequel ace里先写好，再复制过来，比较安全
     5.(`age`, `birthday`, `email`, `gender`, `name`, `salary`)表的字段
     6.(#{age}, #{birthday}, #{email}, #{gender}, #{name}, #{salary})是从传入的Monster对象属性传来的
     7.这里#{age} age对应Monster对象的属性名，其他一样
     -->
    <insert id="addMonster" parameterType="com.gaoxi.entity.Monster" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `monster`
        (`age`, `birthday`, `email`, `gender`, `name`, `salary`)
        VALUES (#{age}, #{birthday}, #{email}, #{gender}, #{name}, #{salary})
    </insert>
    <!-- 配置/实现delMonster()方法
     1.这里java.lang.Integer是Java类型，可以简写为Integer
     2.这里还要写入delete语句
     -->
    <delete id="delMonster" parameterType="java.lang.Integer">
        DELETE FROM monster WHERE id = #{id}
    </delete>
    <!-- 配置/实现updateMonster()方法
     1.com.gaoxi.entity.Monster 可以简写
     2.
     -->
<!--    <update id="updateMonster" parameterType="com.gaoxi.entity.Monster">-->
    <!-- 适用类型别名 -->
    <update id="updateMonster" parameterType="Monster">
        UPDATE `monster`
           SET `age` = #{age},
               `birthday` = #{birthday},
               `email` = #{email},
               `gender` = #{gender},
               `name` = #{name},
               `salary` = #{salary}
         WHERE id = #{id}
    </update>
    <!-- 配置/实现getMonsterById()方法 -->
    <select id="getMonsterById" resultType="Monster">
        SELECT * FROM `monster` WHERE id = #{id}
    </select>
    <!-- 配置/实现findAllMonster()方法 -->
    <select id="findAllMonster" resultType="Monster">
        SELECT * FROM `monster`
    </select>
    <!-- 配置/实现findMonserByNameOrId()方法 -->
    <select id="findMonsterByNameOrId" parameterType="com.gaoxi.entity.Monster" resultType="Monster">
        SELECT * FROM `monster` WHERE `id` = #{id} OR `name` = #{name}
    </select>
    <!-- 配置/实现findMonsterByName()方法 -->
    <!-- 如果是模糊查询，需要用${value}来接收参数 -->
    <select id="findMonsterByName" parameterType="java.lang.String" resultType="Monster">
<!--        SELECT * FROM `monster` WHERE `name` LIKE #{name}-->
        SELECT * FROM `monster` WHERE `name` LIKE '%${name}%'
    </select>
    <!-- 配置/实现findMonsterByIdAndSalary_ParameterHashMap，入参是HashMap -->
    <!-- 如果是以map形式传入参数，当以`id` > #{id}表示作为入参的map中有key为id的键值对 -->
    <!-- 使用map作为入参，可以摆脱POJO/Entity类属性的约束 -->
    <select id="findMonsterByIdAndSalary_ParameterHashMap" parameterType="map" resultType="Monster">
        SELECT * FROM `monster` WHERE `id` > #{id} AND `salary` > #{salary}
    </select>
    <!-- 配置/实现findMonsterByIdAndSalary_ParameterHashMap_ReturnHashMap，使用map作为入参以及返回的结果 -->
    <select id="findMonsterByIdAndSalary_ParameterHashMap_ReturnHashMap" parameterType="map" resultType="map">
        SELECT * FROM `monster` WHERE `id` > #{id} AND `salary` > #{salary}
    </select>
</mapper>